CREATE DATABASE  ssdb;

-- TASK 1

CREATE TABLE STUDENTS (
    STUDENT_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    DATE_OF_BIRTH DATE,
    EMAIL VARCHAR(100),
    PHONE_NUMBER VARCHAR(15)
);

INSERT INTO STUDENTS VALUES
(1, 'JOHN', 'SMITH', '1998-10-25', 'john.smith@example.com', '1234567890'),
(2, 'EMILY', 'JONES', '1999-04-12', 'emily.jones@example.com', '2345678901'),
(3, 'MICHAEL', 'WILLIAMS', '1997-08-30', 'michael.williams@example.com', '3456789012'),
(4, 'SOPHIA', 'BROWN', '2000-01-15', 'sophia.brown@example.com', '4567890123'),
(5, 'JAMES', 'DAVIS', '1998-06-05', 'james.davis@example.com', '5678901234'),
(6, 'OLIVIA', 'MILLER', '1999-09-20', 'olivia.miller@example.com', '6789012345'),
(7, 'LIAM', 'WILSON', '1997-03-18', 'liam.wilson@example.com', '7890123456'),
(8, 'AVA', 'MOORE', '2000-07-22', 'ava.moore@example.com', '8901234567'),
(9, 'WILLIAM', 'TAYLOR', '1998-05-08', 'william.taylor@example.com', '9012345678'),
(10, 'EMMA', 'ANDERSON', '1999-11-11', 'emma.anderson@example.com', '0123456789');


CREATE TABLE COURSES (
    COURSE_ID INT PRIMARY KEY,
    COURSE_NAME VARCHAR(100),
    CREDITS INT,
    TEACHER_ID INT,
    FOREIGN KEY (TEACHER_ID) REFERENCES TEACHERS(TEACHER_ID)
);


INSERT INTO COURSES VALUES
(1, 'MATHEMATICS', 4, 1),
(2, 'PHYSICS', 3, 2),
(3, 'CHEMISTRY', 3, 3),
(4, 'BIOLOGY', 3, 4);


CREATE TABLE ENROLLMENTS (
    ENROLLMENT_ID INT PRIMARY KEY,
    STUDENT_ID INT,
    COURSE_ID INT,
    ENROLLMENT_DATE DATE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);


INSERT INTO ENROLLMENTS  VALUES
(1, 1, 1, '2023-09-01'),
(2, 2, 2, '2023-09-01'),
(3, 3, 3, '2023-09-01'),
(4, 4, 4, '2023-09-01'),
(5, 5, 1, '2023-09-01'),
(6, 6, 2, '2023-09-01'),
(7, 7, 3, '2023-09-01'),
(8, 8, 4, '2023-09-01'),
(9, 9, 1, '2023-09-01'),
(10, 10, 2, '2023-09-01'),
(11, 10, 3, '2023-09-01'),
(12, 9, 4, '2023-09-01'),
(13, 8, 1, '2023-09-01'),
(14, 7, 2, '2023-09-01'),
(15, 6, 3, '2023-09-01'),
(16, 4, 4, '2023-09-01'),
(17, 4, 1, '2023-09-01'),
(18, 3, 2, '2023-09-01'),
(19, 2, 3, '2023-09-01'),
(20, 1, 4, '2023-09-01');


CREATE TABLE TEACHERS (
    TEACHER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100)
);


INSERT INTO TEACHERS VALUES
(1, 'RAJESH', 'KUMAR', 'rajesh.kumar@example.com'),
(2, 'PRIYA', 'RAJAN', 'priya.rajan@example.com'),
(3, 'ANAND', 'SUNDARAM', 'anand.sundaram@example.com'),
(4, 'DEEPIKA', 'VENKATESH', 'deepika.venkatesh@example.com');


CREATE TABLE PAYMENTS (
    PAYMENT_ID INT PRIMARY KEY,
    STUDENT_ID INT,
    AMOUNT DECIMAL(10,2),
    PAYMENT_DATE DATE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID)
);


INSERT INTO PAYMENTS (PAYMENT_ID, STUDENT_ID, AMOUNT, PAYMENT_DATE) VALUES
(1, 1, 100.00, '2023-09-15'),
(2, 2, 150.00, '2023-09-15'),
(3, 3, 200.00, '2023-09-15'),
(4, 4, 250.00, '2023-09-15'),
(5, 5, 100.00, '2023-09-15'),
(6, 6, 150.00, '2023-09-15'),
(7, 7, 200.00, '2023-09-15');


SELECT * FROM STUDENTS;
SELECT * FROM TEACHERS;

SELECT * FROM PAYMENTS;
SELECT * FROM COURSES;
SELECT * FROM ENROLLMENTS;

-- TASK 2


-- INSERT A NEW STUDENT INTO THE "STUDENTS" TABLE:
INSERT INTO STUDENTS VALUES (11,'JOHN', 'DOE', '1995-08-15', 'john.doe@example.com', '1234567890');

-- ENROLL A STUDENT IN A COURSE:
INSERT INTO ENROLLMENTS VALUES (21,1, 2, '2024-04-12'); 

-- UPDATE THE EMAIL ADDRESS OF A SPECIFIC TEACHER:
UPDATE TEACHERS SET EMAIL = 'KUMAR@example.com' WHERE TEACHER_ID = 1;

-- DELETE A SPECIFIC ENROLLMENT RECORD FROM THE "ENROLLMENTS" TABLE:
DELETE FROM ENROLLMENTS
WHERE STUDENT_ID = 1 AND COURSE_ID = 2;

-- UPDATE THE "COURSES" TABLE TO ASSIGN A SPECIFIC TEACHER TO A COURSE:
UPDATE COURSES SET TEACHER_ID = 1 WHERE COURSE_ID = 1;

-- DELETE A SPECIFIC STUDENT FROM THE "STUDENTS" TABLE AND REMOVE ALL THEIR ENROLLMENT RECORDS:
DELETE FROM STUDENTS WHERE STUDENT_ID = 1;
DELETE FROM ENROLLMENTS WHERE STUDENT_ID = 1;

-- UPDATE THE PAYMENT AMOUNT FOR A SPECIFIC PAYMENT RECORD IN THE "PAYMENTS" TABLE:
UPDATE PAYMENTS SET AMOUNT = 200.00 WHERE PAYMENT_ID = 1;

-- TASK 3
-- CALCULATE THE TOTAL PAYMENTS MADE BY A SPECIFIC STUDENT:
SELECT STUDENT_ID, SUM(AMOUNT) AS TOTAL_PAYMENTS FROM PAYMENTS WHERE STUDENT_ID = 2 GROUP BY STUDENT_ID;

-- RETRIEVE A LIST OF COURSES ALONG WITH THE COUNT OF STUDENTS ENROLLED IN EACH COURSE:
SELECT COURSE_NAME, COUNT(STUDENT_ID) AS ENROLLED_STUDENTS_COUNT FROM COURSES 
LEFT JOIN ENROLLMENTS ON COURSES.COURSE_ID = ENROLLMENTS.COURSE_ID GROUP BY COURSE_NAME;

-- FIND THE NAMES OF STUDENTS WHO HAVE NOT ENROLLED IN ANY COURSE:
SELECT FIRST_NAME, LAST_NAME FROM STUDENTS 
LEFT JOIN ENROLLMENTS ON STUDENTS.STUDENT_ID = ENROLLMENTS.STUDENT_ID 
WHERE ENROLLMENTS.STUDENT_ID IS NULL;

-- RETRIEVE THE FIRST NAME, LAST NAME OF STUDENTS, AND THE NAMES OF THE COURSES THEY ARE ENROLLED IN:
SELECT S.FIRST_NAME, S.LAST_NAME, C.COURSE_NAME FROM STUDENTS S
JOIN ENROLLMENTS E ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON E.COURSE_ID = C.COURSE_ID;

-- LIST THE NAMES OF TEACHERS AND THE COURSES THEY ARE ASSIGNED TO:
SELECT T.FIRST_NAME, T.LAST_NAME, C.COURSE_NAME FROM TEACHERS T
JOIN COURSES C ON T.TEACHER_ID = C.TEACHER_ID;

-- RETRIEVE A LIST OF STUDENTS AND THEIR ENROLLMENT DATES FOR A SPECIFIC COURSE:
SELECT S.FIRST_NAME, S.LAST_NAME, E.ENROLLMENT_DATE FROM STUDENTS S
JOIN ENROLLMENTS E ON S.STUDENT_ID = E.STUDENT_ID JOIN COURSES C ON E.COURSE_ID = C.COURSE_ID
WHERE C.COURSE_ID = 2;

-- FIND THE NAMES OF STUDENTS WHO HAVE NOT MADE ANY PAYMENTS:
SELECT FIRST_NAME, LAST_NAME FROM STUDENTS 
LEFT JOIN PAYMENTS ON STUDENTS.STUDENT_ID = PAYMENTS.STUDENT_ID
WHERE PAYMENTS.PAYMENT_ID IS NULL;

-- IDENTIFY COURSES THAT HAVE NO ENROLLMENTS:
SELECT COURSE_NAME FROM COURSES 
LEFT JOIN ENROLLMENTS ON COURSES.COURSE_ID = ENROLLMENTS.COURSE_ID 
WHERE ENROLLMENTS.ENROLLMENT_ID IS NULL;

-- FIND TEACHERS WHO ARE NOT ASSIGNED TO ANY COURSES:
SELECT FIRST_NAME, LAST_NAME FROM TEACHERS 
LEFT JOIN COURSES ON TEACHERS.TEACHER_ID = COURSES.TEACHER_ID
WHERE COURSES.COURSE_ID IS NULL;

-- TASK 3 (CONTINUED)
-- 1. CALCULATE THE AVERAGE NUMBER OF STUDENTS ENROLLED IN EACH COURSE:
SELECT AVG(StudentCount) AS AverageStudentsEnrolled
FROM (SELECT COUNT(*) AS StudentCount FROM ENROLLMENTS GROUP BY COURSE_ID) AS CourseStudentCounts;

-- 2. FIND THE STUDENT(S) WITH THE HIGHEST PAYMENT AMOUNT:
SELECT STUDENT_ID, MAX(AMOUNT) AS HIGHEST_PAYMENT_AMOUNT FROM PAYMENTS GROUP BY STUDENT_ID HAVING MAX(AMOUNT) = (SELECT MAX(AMOUNT) FROM PAYMENTS);

-- 3. FIND THE COURSE(S) WITH THE HIGHEST NUMBER OF ENROLLMENTS:
SELECT COURSE_ID, COUNT(*) AS ENROLLMENT_COUNT
FROM ENROLLMENTS
GROUP BY COURSE_ID
HAVING COUNT(*) = (SELECT MAX(ENROLLMENT_COUNT) FROM (SELECT COUNT(*) AS ENROLLMENT_COUNT FROM ENROLLMENTS GROUP BY COURSE_ID) AS MaxEnrollments);

-- 5. FIND STUDENTS ENROLLED IN ALL COURSES:
SELECT STUDENT_ID
FROM ENROLLMENTS
GROUP BY STUDENT_ID
HAVING COUNT(DISTINCT COURSE_ID) = (SELECT COUNT(DISTINCT COURSE_ID) FROM COURSES);

-- 7. CALCULATE THE AVERAGE AGE OF STUDENTS:
SELECT AVG(StudentAge) AS AverageAge FROM (SELECT DATEDIFF(YEAR, DATE_OF_BIRTH, GETDATE()) AS StudentAge FROM STUDENTS) AS StudentAges;

-- 8. FIND COURSES WITH NO ENROLLMENTS:
SELECT COURSE_NAME FROM COURSES WHERE COURSE_ID NOT IN (SELECT COURSE_ID FROM ENROLLMENTS);

-- 9. RETRIEVE ENROLLMENT ID, COURSE ID, AND TOTAL AMOUNT PAID FOR EACH ENROLLMENT:
SELECT ENROLLMENT_ID, COURSE_ID, (SELECT SUM(AMOUNT) FROM PAYMENTS WHERE PAYMENTS.STUDENT_ID = ENROLLMENTS.STUDENT_ID) AS TOTAL_AMOUNT FROM ENROLLMENTS;

-- 10. FIND STUDENTS WHO HAVE MADE MORE THAN ONE PAYMENT:
SELECT STUDENT_ID FROM (SELECT STUDENT_ID, COUNT(*) AS PAYMENT_COUNT FROM PAYMENTS GROUP BY STUDENT_ID) AS PaymentCounts WHERE PAYMENT_COUNT > 1;

-- 11. RETRIEVE STUDENT ID, FIRST NAME, LAST NAME, AND TOTAL PAYMENTS MADE:
SELECT STUDENT_ID, FIRST_NAME, LAST_NAME, (SELECT SUM(AMOUNT) FROM PAYMENTS WHERE PAYMENTS.STUDENT_ID = STUDENTS.STUDENT_ID ) AS TotalPayments FROM STUDENTS;

-- 12. COUNT THE NUMBER OF ENROLLMENTS FOR EACH COURSE:
SELECT COURSE_NAME, (SELECT COUNT(*) FROM ENROLLMENTS WHERE COURSES.COURSE_ID = ENROLLMENTS.COURSE_ID) AS EnrollmentCount FROM COURSES;

-- 13. CALCULATE THE AVERAGE PAYMENT AMOUNT:
SELECT (SELECT AVG(AMOUNT) FROM PAYMENTS) AS AVERAGEAMOUNT;

